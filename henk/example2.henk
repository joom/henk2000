-- Existential Types

data E : * 
 = { EC : ∀ a:* . a -> (a -> Bool) -> E }
 
let apply : E -> Bool
 = λ e : E .
   case e of
   {EC t x f => f x}
   
let ex1 : E
 = EC Nat (Succ Zero) isZero

let ex2 : E 
 = EC (List Int) (Nil Int) (isEmpty Int)

let exList : List E
  = Cons E ex1 (Cons E ex2 (Nil E))

let main : List Bool =
 map E Bool apply exList

