
data Tmp : Nat -> *
    = { TmpA : Tmp Zero
      ; TmpB : (∏ n:Nat . Tmp (Succ n))
      }

let makeTmp : (∏ n:Nat . Tmp n)
        = λ n:Nat . case n of
            { Zero   => TmpA
            ; Succ x => TmpB x
            }

let main : Bool = makeTmp Three

